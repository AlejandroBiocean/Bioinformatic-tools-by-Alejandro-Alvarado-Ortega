#Load dada2 package
library(dada2)

#Define the path where you have your amplicon sequences. These fastq files were generated by 2x250 Illumina Miseq amplicon sequencing of the V4 region of the 16s rRNA gene from gut samples collected longitudinally from a mouse post-wearing.
#If you´re using less-overlapping than V4, like V1-V2, V3-V4, truncLen must be large enough to maintein 20 + biological.length.variation nucleotides of overlap between them.
#Download data in: https://mothur.s3.us-east-2.amazonaws.com/wiki/miseqsopdata.zip 
path <- "C:/Entrenamiento_bioinfo/miseqsopdata/MiSeq_SOP"
list.files(path) 

#Define lists of the forward and reverse fastq files to get matching lists. 
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names= TRUE))
fnRs <- sort(list.files(path, pattern="R2_001.fastq", full.names = TRUE))

#Extract sample names wich have format SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)

#Visualize quality profiles of the forward reads. Green line = mean quality. Orange line =quartiles. Red line = proportion of reads thath extend to at least thath position.
plotQualityProfile(fnFs[1:2])

#Visualize quality profiles of the reaverse reads.It´s common in Illumina have worse quality in reverse reads.  
plotQualityProfile(fnRs[1:2])

#Filter files and trim.
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names

#Use standard filtering parameters. maxEE sets the maximum number of "expected errors" allowed in a read, which is a better filter than simply avering quality scores. 
#If too few reads are passing the filter, relaxing maxEE and reducing truncLen to remove low quality tails.
#When choosing truncLen for paired-end reads, you must maintain overlap afeter truncation in order to merge them later. 
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240, 160), 
                     maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
                     compress=TRUE, multithread = FALSE) 
head(out)

#Lear error rates
#learngErrors learns error model from the data. 
errF <- learnErrors(filtFs, multithread = TRUE)
errR <- learnErrors(filtRs, multithread = TRUE)

#Visualize estimated error rates.
#We showing error rates for each possible transition (A-->A). 
#Points are the observed error rates for each consensus quality score. 
#Black line shows the estimated error rates after convergence of machine-learning algorithm. 
#Red line shows the error rated expected under the nominal definition of the Q-score.
plotErrors(errF, nominalQ = TRUE) 

#Sample inteference. Ready to applt the core sample inference algorithm to the filtered and trimmed sequence data. 
dadaFs <- dada(filtFs, err=errF, multithread = TRUE) 

dadaRs <- dada(filtRs, err=errR, multithread = TRUE) 

#Inspect the returned dada-class object. 
dadaFs[[1]] 

#Merge paired reads. Merge forward and reverse, together, to obtain full denoised sequences. 
#mergers is a list of data.frame from each sample. 
mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose = TRUE)
head(mergers[[1]]) 

#Construct sequence table.
#sequence table is a matrix with rows corresponding to samples, and columns corresponding to sequence variants. 
seqtab <- makeSequenceTable(mergers)
#In this example we are showing 293 ASVs. 
dim(seqtab)

#Remove chimeras
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim) 

#Track reads through the pipeline to check progress
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nochim")
rownames(track) <- sample.names
head(track) 

#Assign taxonomy
#By naive Bayesian classifer method.
#Previously download SILVA data in https://zenodo.org/records/4587955 
silva_path <- "C:/Entrenamiento_bioinfo/silva_nr99_v138.1_train_set.fa.gz"
taxa <- assignTaxonomy(seqtab.nochim, 
                       silva_path,
                       multithread = TRUE)

#Add package that implement species level assigments based on exact matching. 
#We can download species package in https://zenodo.org/record/1172783/files/silva_species_assignment_v132.fa.gz
species_path <- "C:/Entrenamiento_bioinfo/silva_species_assignment_v132.fa.gz"
taxa <- addSpecies(taxa, species_path)

#Inspect taxonomic assignments.
#We seeing Bacteriodetes well represented among the most abundant taxa in these fecal samples.
taxa.print <- taxa
rownames(taxa.print) <- NULL
head(taxa.print)

#Evaluate accuracy
#We are going to evaluate accuracy on the mock community. 
unqs.mock <- seqtab.nochim["Mock",]
#Drop ASVs absent in mock community
unqs.mock <- sort(unqs.mock[unqs.mock>0], decreasing=TRUE)
cat("DADA2 inferred", length(unqs.mock), "sample sequences present in the community. \n")
#This mock community contained 20 bacterial strains. 
mock.ref <- getSequences(file.path(path, "HMP_MOCK.v35.fasta"))
match.ref <- sum(sapply(names(unqs.mock), function(x) any(grepl(x, mock.ref))))
cat("Of those", sum(match.ref), "were exact matches to the expected reference sequences \n")
#DADA2 identified 20 ASVs all of which exactly match the reference genomes of the expected community members.
#The residual error rate after DADA2 pipeline for this sample is 0%.

#Do grpahics with phyloseq.
library(phyloseq)
library(Biostrings)
library(ggplot2) 

#Build data.frame from information encoded in the filenames.
samples.out <- rownames(seqtab.nochim)
subject <- sapply(strsplit(samples.out, "D"), `[`,1)
gender <- substr(subject, 1,1)
subject <- substr(subject, 2,999)
day <- as.integer(sapply(strsplit(samples.out, "D"), `[`, 2))
samdf <- data.frame(Subject=subject, Gender=gender, Day=day)
samdf$When <- "Early"
samdf$When[samdf$Day>100] <- "Late"
rownames(samdf) <- samples.out 

#Construct a phyloseq object from dada2 outputs. 
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = FALSE),
               sample_data(samdf),
               tax_table(taxa))

ps <- prune_samples(sample_names(ps) != "Mock", ps) #Remove mock sample

dna <- Biostrings::DNAStringSet(taxa_names(ps))
names(dna) <- taxa_names(ps)
ps <- merge_phyloseq(ps, dna)
taxa_names(ps) <- paste0("ASV", seq(ntaxa(ps))) 
ps

#Visualize alpha-diversity
plot_richness(ps, x="Day", measures=c("Shannon", "Simpson"), color="When")
#We are not seeing systematic difference in alpha-diversity early and late samples. 
#Microbiota is in equal relationship, cOuld be from positive external factors of ambient or diet. 
#Bar plot for 20 more families presence in samples. 
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="Day", fill="Family") + facet_wrap(~When, scales="free_x")

#Reference to:
#I follow the next guide to do this analysis:
#https://benjjneb.github.io/dada2/tutorial.html 
